# @package dataset_config
_target_: movement_primitive_diffusion.datasets.trajectory_dataset.SubsequenceTrajectoryDataset
_recursive_: False
subsequence_length: ${eval:'${t_obs}+${t_pred}-1'}
trajectory_dirs: null # set in python code
keys:
  - action_l
  - action_r
  - agent_pos_l
  - agent_pos_r
  - agent_vel_l
  - agent_vel_r
  - lamp_base
  - lamp_bulb
  - lamp_hood
dt: 0.005555556 # 1/180 What is the time difference between each value in the time series? e.g. 0.1
target_dt: null # <- Optional resampling of your time series
normalize_keys: [] # <- which of the keys should be normalized? (scaled to an interval)
#  - time_series_a
normalize_symmetrically: True # False: normalized to [0, 1] instead of [-1, 1]
standardize_keys: [] # <- which of the keys should be standardized? (zero mean, std of 1)
#  - time_series_b
scaler_values:
    action_l:
      min: null # <- will be calculated in the dataset
      max: null
    action_r:
      mean: null
      std: null
    agent_pos_l:
      mean: null
      std: null
    agent_pos_r:
      mean: null
      std: null
    agent_vel_l:
      mean: null
      std: null
    agent_vel_r:
      mean: null
      std: null
    lamp_base:
      mean: null
      std: null
    lamp_bulp:
      mean: null
      std: null
    lamp_hood:
      mean: null
      std: null
recalculate_velocities_from_to: [] # <- if you normalize position values, the velocity values will not match anymore (0 velocity before scaling might not be 0 velocity after scaling)
 # <- calculate time_series_c (let's say these are joint velocities) from the normalized values of time_series_a using dt
calculate_velocities_from_to:  # dataset does not have action_velocities -> calculate
  - [action_l, action_vel_l]
  - [action_r, action_vel_r]
image_keys: []
image_sizes: []
crop_sizes: []
